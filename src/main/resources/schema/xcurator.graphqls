"""----------------------------------Federated----------------------------------"""

interface Asset @key(fields: "id") @extends {
    id: ID! @external
}

type Image implements Asset  @key(fields : "id") @extends  {
    id: ID! @external
}

type Query {
    museumObject(where: MuseumObjectUniqueInput!, preferredLanguage:Language): MuseumObject!
    museumObjects(where: MuseumObjectSearchWhereInput,orderBy:[MuseumObjectSearchOrderByInput], first: Int = 10,  skip: Int = 0,preferredLanguage:Language): MuseumObjectResultConnection!
    exceptionalMuseumObjects(where: MuseumObjectSearchWhereInput,orderBy:[MuseumObjectSearchOrderByInput], first: Int = 10,  skip: Int = 0): ExceptionalMuseumObjectResultConnection!

    story(where: StoryUniqueInput!): Story!
    stories(where:StoryWhereInput!, orderBy: [StoryOrderByInput!], first: Int = 10, skip: Int = 0 ): StoryConnection!

    smartKeywords(first:Int = 10, skip: Int=0): [String!]!

    "Get a Material Distribution Statistic."
    materialDistribution: [MaterialGroup!]!
    "Get a Country Distribution Statistic."
    countryDistribution: [CountryGroup!]!
    "Get an Epoch Distribution Statistic."
    epochDistribution: [EpochGroup!]!
    "Search for similar images by a given Image file, url or a max 77 Token long text"
    similarMuseumObjects(where: ImageMuseumObjectSearchWhereInput!, first:Int = 10, skip:Int = 0): MuseumObjectResultConnection!
    "Search for images by a given RGB value"
    museumObjectsByColor(where: MuseumObjectColorSearchWhereInput! first: Int = 10,  skip: Int = 0): MuseumObjectColorResultConnection!
}


type Mutation {
    createStory(create: CreateStory): Story!
    createModule(connect: ConnectStory, museumObjectsId:String!): Module!
    sync: Int!
    createIndexes:Int

}


input  StoryUniqueInput {
    id: ID!
}


type StoryEdge {
    node: Story
    cursor: String
}


type StoryConnection {
    edges: [StoryEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

input StoryOrderByInput {
    updatedAt: SortDirection
    createdAt: SortDirection
}


input StoryWhereInput {
    title: StringFilter
    garbage: Boolean
    updatedAt: DateTimeFilter
    createdAt: DateTimeFilter
}


input ConnectStory {
    storyId: String!
}


input ConnectModule {
    artifactsIds: [String!]!
    storyId: String!
}

input CreateStory {
    museumObjectIds: [String!]!
    topics: [String!]

}

type Story {
    id: ID!
    modules:  [Module!]!
    topics: [String!]!
}

## MuseumObject -> Artifact

input UpdateMuseumObject {
    id: String!
    moduleId: String!

}

input MuseumObjectUniqueInput{
    id: ID!
}


"An object with an ID"
interface Node {
    "The ID of an object"
    id: ID!
}


type MuseumObjectConnection {
    edges: [MuseumObjectEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type MuseumObjectEdge {
    node: MuseumObject
    cursor: String
}

type Module {
    id: ID!
    museumObject: MuseumObject!
}



type MuseumObject implements Node @key(fields : "id") {
    id:ID!
    externalId:String!
    title: TextContent!
    description:TextContent!
    createdAt: DateTime!
    updatedAt: DateTime!
    keywords: [String!]!
    materials: [String!]!
    location: Location!
    techniques: [String!]!
    images: [Image!]!
    dateRange: DateRange
    topics: [MuseumObjectTopic!]!
    dataSource: DataSource!
}

type MuseumObjectTopic {
    id: ID!
    labels: [String!]!
    weight: Float!
}

type TextContent {
    content: String!
    entities: [NamedEntity!]!
}
type DateRange {
    name: String!
    start: DateTime
    end: DateTime
    epoch: String!
}


type Location   {
    name: String
    longitude: Float
    countryName: String
    latitude: Float
}


input MuseumObjectColorSearchWhereInput {
    color: RGB!
}

input MuseumObjectTitleWhereInput{
    title: StringFilter
}

input MuseumObjectOrderByInput {
    updatedAt: SortDirection
    createdAt: SortDirection
}
input MuseumObjectWhereInput {
    updatedAt: DateTimeFilter
    createdAt: DateTimeFilter
}


type MaterialGroup {
    "Material name"
    name: String!
    "Amount of museum objects of this material."
    count: Int!
    "Percentage ratio of museum objects in the whole (out of 100%)"
    ratio: Int!
}


type CountryGroup{
    "Country name"
    name: String!
    "Amount of museum objects in this country."
    count: Int!
    "Percentage ratio of museum objects in this country"
    ratio: Int!
}

type EpochGroup {
    "Epoch name"
    name: String!
    "Amount of museum objects in this epoch."
    count: Int!
    "Percentage ratio of museum objects in this epoch"
    ratio: Int!
    "start year of an epoch"
    start: Int!
    "end year of an epoch"
    end: Int!
}


type MuseumObjectResultConnection {
    edges: [MuseumObjectSearchResultEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
    keywords: [String!]!
}


type MuseumObjectSearchResultEdge {
    node: MuseumObject!
    cursor: String!
}

input MuseumObjectSearchWhereInput {
    keywords: [String!]
    materials: [String!]
    countries: [String!]
    epochs:[String!]
}


input MuseumObjectSearchOrderByInput {
    updatedAt: SortDirection
    createdAt: SortDirection

}
enum Language {
    DE,
    NL,
    EN
}

enum DataSource {
    TIN,
    EXPODB,
    BEELDBANK
}

type ExceptionalMuseumObjectSearchResultEdge {
    node: ExceptionalMuseumObject!
    cursor: String!
}

type ExceptionalMuseumObjectResultConnection {
    edges: [ExceptionalMuseumObjectSearchResultEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
    keywords: [String!]!
}


type ExceptionalMuseumObject {
    museumObject: MuseumObject!
    reason: [ExceptionalReason!]!
}

enum ExceptionalReason {
    MATERIAL
}

input ImageMuseumObjectSearchWhereInput {
    projectId: ID!
    imageId: ID!
}

type MuseumObjectColorSearchResult {
    museumObject: MuseumObject!
}

type MuseumObjectColorSearchResultEdge {
    node: MuseumObjectColorSearchResult!
    cursor: String!
}

type MuseumObjectColorResultConnection {
    edges: [MuseumObjectColorSearchResultEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}
